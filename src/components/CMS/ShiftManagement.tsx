import React, { useState } from 'react';
import { Tables } from '../../types/supabase';
import UserSelector from './UserSelector';
import AdminShiftCalendar from './AdminShiftCalendar';
import ShiftEditModal from './ShiftEditModal';
import { Users, Calendar, Settings } from 'lucide-react';

type Shift = Tables<'shifts'>;

const ShiftManagement: React.FC = () => {
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  const handleUserSelect = (userId: string | null) => {
    setSelectedUserId(userId);
  };

  const handleShiftEdit = (shift: Shift) => {
    setSelectedShift(shift);
    setIsEditModalOpen(true);
  };

  const handleModalClose = () => {
    setIsEditModalOpen(false);
    setSelectedShift(null);
  };

  const handleShiftSave = () => {
    // Trigger calendar refresh
    setRefreshTrigger(prev => prev + 1);
    setIsEditModalOpen(false);
    setSelectedShift(null);
    setSelectedDate(null);
  };

  const handleAddShift = (date: Date) => {
    if (!selectedUserId) {
      alert('ユーザーを選択してください');
      return;
    }
    
    // Create a new shift object for adding
    const newShift = {
      id: '', // Will be generated by Supabase
      user_id: selectedUserId,
      shift_date: date.toISOString().split('T')[0],
      shift_type: 'normal' as const,
      shift_status: 'confirmed' as const,
      start_time: null,
      end_time: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    } as Shift;
    
    setSelectedShift(newShift);
    setSelectedDate(date);
    setIsEditModalOpen(true);
  };

  return (
    <div className="h-screen flex flex-col overflow-hidden">
      {/* Compact Header with User Selection */}
      <div className="flex-shrink-0 bg-white border-b border-gray-200 px-4 py-3">
        <div className="flex items-center justify-between">
          {/* Left: Title */}
          <div className="flex items-center space-x-3">
            <Settings className="w-5 h-5 text-blue-600" />
            <div>
              <h1 className="text-lg font-bold text-gray-900">シフト管理</h1>
              <p className="text-xs text-gray-500">シフトの確認・編集・承認</p>
            </div>
          </div>

          {/* Right: User Selection */}
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2 text-sm">
              <Users className="w-4 h-4 text-gray-500" />
              <span className="text-gray-700 hidden sm:inline">表示ユーザー:</span>
            </div>
            <div className="min-w-[200px] max-w-[300px]">
              <UserSelector
                selectedUserId={selectedUserId}
                onUserSelect={handleUserSelect}
                placeholder="全ユーザー"
                compact
              />
            </div>
          </div>
        </div>
      </div>

      {/* Calendar - Full Height */}
      <div className="flex-1 overflow-hidden">
        <AdminShiftCalendar
          key={refreshTrigger} // Force refresh when refreshTrigger changes
          selectedUserId={selectedUserId}
          onShiftEdit={handleShiftEdit}
          onAddShift={handleAddShift}
          fullHeight
        />
      </div>

      {/* Edit Modal */}
      <ShiftEditModal
        isOpen={isEditModalOpen}
        onClose={handleModalClose}
        shift={selectedShift}
        onSave={handleShiftSave}
      />
    </div>
  );
};

export default ShiftManagement;